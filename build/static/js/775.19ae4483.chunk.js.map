{"version":3,"file":"static/js/775.19ae4483.chunk.js","mappings":"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","sources":["components/errorMessage/errorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/charSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    // Before using FSM\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            {/* {errorMessage}\n            {spinner}\n            {content} */}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n   ","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    const renderItems = arr => {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n    \n    // Before using FSM\n    // const items = renderItems(charList);\n\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            {/* {errorMessage}\n            {spinner}\n            {items} */}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    // Before using FSM\n    // const skeleton = char || error || loading ? null : <Skeleton/>\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error || !char) ? <View char={char}/> : null;\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n            {/* {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null : 'There is no comics with this character'}\n            {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }          \n            </ul> \n        </>\n    )\n}\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/errorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/errorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n\r\n    render () {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/charSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n            <meta\r\n                name=\"description\"\r\n                content=\"Marvel information portal\"/>\r\n            <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=dbd50a4b7892574ac2c3eaa6cc2250e0';\r\n    const _baseOffset = 210;\r\n\r\n    // getRecourse = async (url) => {\r\n    //     let res = await fetch(url);\r\n    //     if (!res.ok) {\r\n    //         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    //     }\r\n    //     return await res.json();\r\n    // }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) =>{\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 200)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description ? `${comics.description.slice(0, 200)}...` : 'There is no description for this comics',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\",\r\n        }\r\n    }\r\n\r\n    return {\r\n\t\tclearError,\r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacterByName,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic,\r\n\t};\r\n};\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/errorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCharList","ended","wrap","_context","prev","next","length","concat","_toConsumableArray","stop","_x","apply","arguments","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","charId","loading","error","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","errorInfo","this","setState","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","url","method","body","headers","response","_args","undefined","fetch","sent","ok","status","json","abrupt","t0","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}